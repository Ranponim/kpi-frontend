/**
 * Web Vitals Ï∏°Ï†ï Ïú†Ìã∏Î¶¨Ìã∞
 * 
 * Ïã§ÏãúÍ∞ÑÏúºÎ°ú Core Web Vitals ÏßÄÌëúÎ•º Ï∏°Ï†ïÌïòÍ≥† 
 * ÏΩòÏÜî Î∞è ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ°ÌïòÎäî Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
 */

// web-vitals ÏûÑÌè¨Ìä∏ (Î≤ÑÏ†Ñ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú ÎèôÏ†Å ÏûÑÌè¨Ìä∏)
let webVitals = null;

let vitalsData = {};

/**
 * ÏÑ±Îä• ÏßÄÌëúÎ•º ÏΩòÏÜîÏóê Î°úÍ∑∏ Ï∂úÎ†•
 */
function logVital(metric) {
  console.log(`üìä ${metric.name}: ${metric.value.toFixed(2)}${metric.unit || 'ms'}`);
  vitalsData[metric.name] = {
    value: metric.value,
    rating: metric.rating,
    delta: metric.delta,
    navigationType: metric.navigationType
  };
}

/**
 * ÏÑ±Îä• ÏßÄÌëúÎ•º ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ° (ÏÑ†ÌÉùÏ†Å)
 */
function sendVitalToServer(metric) {
  if (process.env.NODE_ENV === 'production') {
    // Ïã§Ï†ú Ïö¥ÏòÅ ÌôòÍ≤ΩÏóêÏÑúÎäî Analytics ÏÑúÎπÑÏä§Î°ú Ï†ÑÏÜ°
    // Example: gtag('event', metric.name, { value: metric.value });
  }
}

/**
 * Î™®Îì† Core Web Vitals Ï∏°Ï†ï ÏãúÏûë
 */
export async function measureWebVitals() {
  console.log('üîç Web Vitals Ï∏°Ï†ï ÏãúÏûë...');
  
  try {
    // ÎèôÏ†Å ÏûÑÌè¨Ìä∏Î°ú web-vitals Î°úÎìú (ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï)
    if (!webVitals) {
      webVitals = await Promise.race([
        import('web-vitals'),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('web-vitals Î°úÎìú ÌÉÄÏûÑÏïÑÏõÉ')), 5000)
        )
      ]);
    }
    
    // ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ìï®ÏàòÎì§ ÌôïÏù∏ Î∞è Ìò∏Ï∂ú
    if (webVitals.onCLS || webVitals.getCLS) {
      const clsFunction = webVitals.onCLS || webVitals.getCLS;
      clsFunction((metric) => {
        logVital(metric);
        sendVitalToServer(metric);
      });
    }

    if (webVitals.onFID || webVitals.getFID) {
      const fidFunction = webVitals.onFID || webVitals.getFID;
      fidFunction((metric) => {
        logVital(metric);
        sendVitalToServer(metric);
      });
    }

    if (webVitals.onFCP || webVitals.getFCP) {
      const fcpFunction = webVitals.onFCP || webVitals.getFCP;
      fcpFunction((metric) => {
        logVital(metric);
        sendVitalToServer(metric);
      });
    }

    if (webVitals.onLCP || webVitals.getLCP) {
      const lcpFunction = webVitals.onLCP || webVitals.getLCP;
      lcpFunction((metric) => {
        logVital(metric);
        sendVitalToServer(metric);
      });
    }

    if (webVitals.onTTFB || webVitals.getTTFB) {
      const ttfbFunction = webVitals.onTTFB || webVitals.getTTFB;
      ttfbFunction((metric) => {
        logVital(metric);
        sendVitalToServer(metric);
      });
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Web Vitals Ï∏°Ï†ï Ïã§Ìå®:', error);
    // Ìè¥Î∞±: Í∏∞Î≥∏ ÏÑ±Îä• Ï∏°Ï†ï
    measureBasicPerformance();
  }
}

/**
 * Í∏∞Î≥∏ ÏÑ±Îä• Ï∏°Ï†ï (web-vitals ÏóÜÏù¥)
 */
function measureBasicPerformance() {
  if (typeof window !== 'undefined' && window.performance) {
    // ÌéòÏù¥ÏßÄ Î°úÎìú ÏãúÍ∞Ñ Ï∏°Ï†ï
    window.addEventListener('load', () => {
      const loadTime = performance.now();
      logVital({
        name: 'PageLoad',
        value: loadTime,
        rating: loadTime < 2000 ? 'good' : loadTime < 4000 ? 'needs-improvement' : 'poor'
      });
    });
    
    // Ï≤´ Î≤àÏß∏ ÏÉÅÌò∏ÏûëÏö©ÍπåÏßÄÏùò ÏãúÍ∞Ñ Ï∏°Ï†ï
    let firstInteraction = false;
    ['click', 'keydown', 'touchstart'].forEach(eventType => {
      document.addEventListener(eventType, () => {
        if (!firstInteraction) {
          firstInteraction = true;
          const interactionTime = performance.now();
          logVital({
            name: 'FirstInteraction',
            value: interactionTime,
            rating: interactionTime < 1000 ? 'good' : interactionTime < 3000 ? 'needs-improvement' : 'poor'
          });
        }
      }, { once: true });
    });
  }
}

/**
 * ÌòÑÏû¨ÍπåÏßÄ Ï∏°Ï†ïÎêú Web Vitals Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
 */
export function getVitalsData() {
  return vitalsData;
}

/**
 * ÏÑ±Îä• ÏßÄÌëúÍ∞Ä ÏñëÌò∏ÌïúÏßÄ ÌåêÎã®
 */
export function evaluatePerformance(vitals = vitalsData) {
  const thresholds = {
    CLS: { good: 0.1, needsImprovement: 0.25 },
    FID: { good: 100, needsImprovement: 300 },
    FCP: { good: 1800, needsImprovement: 3000 },
    LCP: { good: 2500, needsImprovement: 4000 },
    TTFB: { good: 800, needsImprovement: 1800 }
  };

  const evaluation = {};
  
  Object.entries(vitals).forEach(([name, data]) => {
    const threshold = thresholds[name];
    if (threshold) {
      if (data.value <= threshold.good) {
        evaluation[name] = 'good';
      } else if (data.value <= threshold.needsImprovement) {
        evaluation[name] = 'needs-improvement';
      } else {
        evaluation[name] = 'poor';
      }
    }
  });

  return evaluation;
}

/**
 * ÏÑ±Îä• Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
 */
export function generatePerformanceReport() {
  const vitals = getVitalsData();
  const evaluation = evaluatePerformance(vitals);
  
  const report = {
    timestamp: new Date().toISOString(),
    url: window.location.href,
    userAgent: navigator.userAgent,
    vitals,
    evaluation,
    summary: {
      totalMetrics: Object.keys(vitals).length,
      goodMetrics: Object.values(evaluation).filter(rating => rating === 'good').length,
      poorMetrics: Object.values(evaluation).filter(rating => rating === 'poor').length
    }
  };
  
  console.log('üìä ÏÑ±Îä• Î¶¨Ìè¨Ìä∏:', report);
  return report;
}
